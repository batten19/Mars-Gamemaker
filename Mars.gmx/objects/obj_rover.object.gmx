<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_roverNew</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise Variables
roverWidth = sprite_width;
roverHeight = sprite_height;
timesLeftRoom = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shortcuts for keypresses
moveLeft = keyboard_check(ord('A'));
moveRight = keyboard_check(ord('D'));
moveForward = keyboard_check(ord('W'));
moveBack = keyboard_check(ord('S'));

arrowLeft = keyboard_check(vk_left);
arrowRight = keyboard_check(vk_right);
arrowUp = keyboard_check(vk_up);
arrowDown = keyboard_check(vk_down);

spaceBrake = keyboard_check(vk_space);

searchKey = keyboard_check(ord('E'));


//Move Player
if (moveLeft || arrowLeft) 
{ 
  image_angle = image_angle + 2; 
}

if (moveRight || arrowRight) 
{ 
  image_angle = image_angle - 2; 
}

if (moveForward || arrowUp) 
{ 
  motion_add(image_angle,0.2);
}

if (moveBack || arrowDown) 
{ 
  motion_add(image_angle,-0.2);
}

///Speed Limiter
if (speed &gt; 7)
{
 speed = 7;
}

///Space Braking
if (spaceBrake)
{
 speed = speed / 1.05;
}

///Particle System
if speed &gt; 0.1
{
   effect_create_below(ef_smoke, x, y, choose(0, 0.5, 1), $215eaa);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Outside Room
if(obj_rover.x &lt;=0.1 || obj_rover.x &gt;= room_width || obj_rover.y &lt;=0 || obj_rover.y &gt;= room_height)
{
    if(timesLeftRoom &lt;= 1)
    {
     show_message("The rover has been recovered, be careful when driving. It may not be recoverable next time");
     move_random(1, 1);
     speed=0;
     timesLeftRoom+=1;
    }
    else
    {
    show_message("You were warned. The rover has been sucked off (No pun intended). You have lost science points and a days progress.")
    game_restart();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug restart room

roomRestart = keyboard_check(ord('R'));
if (roomRestart) 
{
    room_restart();
    global.numberOfSearches = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
